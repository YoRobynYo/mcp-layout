// ============================================================================
// CENTRE CUBE MODULE - FIXED VERSION
// ============================================================================
@use './variables' as vars;
@use 'sass:color';

// Cube scene container - ENLARGED to allow full rotation
.cube-scene {
  position: absolute;
  transform: none;
  width: vars.$overall-cube-size; /* Overall width of the 2x2 structure */
  height: vars.$overall-cube-size; /* Overall height of the 2x2 structure */
  perspective: 1000px;
  z-index: 1000;
  overflow: visible; // Ensure nothing gets clipped
  visibility: hidden;
  opacity: 0;
  transition: opacity 0.3s ease-in-out; /* Add for smooth fade-in */
}

#cube-scene-main {
  top: auto;
  bottom: 20px;
  left: 20px;
}

#cube-scene-secondary {
  top: 20px;
  left: 20px;
}

// Main centre cube container - POSITIONED in top-left of its scene container
.centreCube {
  position: absolute;
  top: 50%;
  left: 50%;
  width: vars.$overall-cube-size; /* Overall width of the 2x2 structure */
  height: vars.$overall-cube-size; /* Overall height of the 2x2 structure */
  transform-style: preserve-3d;
  transform-origin: center center;
  margin-left: vars.$overall-cube-margin; /* Center the overall structure */
  margin-top: vars.$overall-cube-margin; /* Center the overall structure */
  cursor: grab;

  &:active {
    cursor: grabbing;
  }

  // Hover effect only when NOT being manually rotated
  
}

// NEW: Class to disable CSS interference during manual rotation
.centreCube.manual-rotating {
  transition: none !important;

  &:hover {
    transform: none !important;
  }
}

// Styles for individual small cubes within the 2x2x2 structure
.small-cube {
  position: absolute;
  width: vars.$small-cube-size;
  height: vars.$small-cube-size;
  transform-style: preserve-3d;
  transform-origin: center center;
}

/* Positioning for each of the 8 small cubes */
.top-left-front {
  transform: translate3d(vars.$tlf-translate);
}
.top-right-front {
  transform: translate3d(vars.$trf-translate);
}
.bottom-left-front {
  transform: translate3d(vars.$blf-translate);
}
.bottom-right-front {
  transform: translate3d(vars.$brf-translate);
}
.top-left-back {
  transform: translate3d(vars.$tlb-translate);
}
.top-right-back {
  transform: translate3d(vars.$trb-translate);
}
.bottom-left-back {
  transform: translate3d(vars.$blb-translate);
}
.bottom-right-back {
  transform: translate3d(vars.$brb-translate);
}

// Base styles for all faces of the small cubes
.face {
  position: absolute;
  width: vars.$small-cube-size;
  height: vars.$small-cube-size;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1rem;
  font-weight: bold;
  color: vars.$text-color-secondary;
  text-align: center;
  border: 2px solid vars.$border-color-main;
  border-radius: 12px; /* Softer corners */
  box-shadow:
    0 0 15px rgba(0, 0, 0, 0.2), /* Softer shadow */
    inset 0 0 10px rgba(255, 255, 255, 0.05); /* Lighter inner glow */
  backdrop-filter: blur(8px); /* Increased blur */
  transition: vars.$transition-default;
  transform-style: preserve-3d; /* Enable 3D space for children */
  backface-visibility: hidden;
}

/* Individual face transformations for small cubes */
.face.front {
  background: linear-gradient(135deg, vars.$color-front, color.scale(vars.$color-front, $lightness: -20%)); /* Softer gradient */
  transform: translateZ(vars.$face-translateZ);
}

.face.back {
  background: linear-gradient(135deg, vars.$color-back, color.scale(vars.$color-back, $lightness: -20%));
  transform: rotateY(180deg) translateZ(vars.$face-translateZ);
}

.face.right {
  background: linear-gradient(135deg, vars.$color-right, color.scale(vars.$color-right, $lightness: -20%));
  transform: rotateY(90deg) translateZ(vars.$face-translateZ);
}

.face.left {
  background: linear-gradient(135deg, vars.$color-left, color.scale(vars.$color-left, $lightness: -20%));
  transform: rotateY(-90deg) translateZ(vars.$face-translateZ);
}

.face.top {
  background: linear-gradient(135deg, vars.$color-top, color.scale(vars.$color-top, $lightness: -20%));
  transform: rotateX(90deg) translateZ(vars.$face-translateZ);
}

.face.bottom {
  background: linear-gradient(135deg, vars.$color-bottom, color.scale(vars.$color-bottom, $lightness: -20%));
  transform: rotateX(-90deg) translateZ(vars.$face-translateZ);
}

// Animation classes for JavaScript control (these can work alongside manual rotation)
.centreCube.rotating {
  transition: transform 0.8s cubic-bezier(0.4, 0.0, 0.2, 1);
}

.centreCube.rotate-front {
  transform: rotateX(0deg) rotateY(0deg);
}

.centreCube.rotate-back {
  transform: rotateX(0deg) rotateY(180deg);
}

.centreCube.rotate-right {
  transform: rotateX(0deg) rotateY(-90deg);
}

.centreCube.rotate-left {
  transform: rotateX(0deg) rotateY(90deg);
}

.centreCube.rotate-top {
  transform: rotateX(-90deg) rotateY(0deg);
}

.centreCube.rotate-bottom {
  transform: rotateX(90deg) rotateY(0deg);
}